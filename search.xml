<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kuangbin专题一简单搜索(14)</title>
    <url>/2020/04/09/kuangbin%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2(14)/</url>
    <content><![CDATA[<center>
<font face="微软雅黑" color="littblue">HDU-2612 find a way(两次bfs+节点遍历)

<p><a href="https://vjudge.net/problem/HDU-2612#author=SWUN2018" target="_blank" rel="noopener">https://vjudge.net/problem/HDU-2612#author=SWUN2018</a></p></font></center><p></p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//别人的代码,并不难</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5000005</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,suma,vis1[<span class="number">205</span>][<span class="number">205</span>],vis2[<span class="number">205</span>][<span class="number">205</span>],sum1[<span class="number">205</span>][<span class="number">205</span>],sum2[<span class="number">205</span>][<span class="number">205</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s[<span class="number">205</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> x,y,num;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    node(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> n):x(x1),y(y1),num(n)&#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//找到Ｙ到KFC的最短时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis1[x][y] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">queue</span>&lt;node&gt;q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q.push(node(x,y,<span class="number">0</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        node temp = q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s[temp.x][temp.y] == <span class="string">'@'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sum++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(sum == suma) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> fx = temp.x + dir[i][<span class="number">0</span>], fy = temp.y + dir[i][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(fx &gt;=<span class="number">0</span> &amp;&amp; fx &lt; n &amp;&amp; fy &gt;= <span class="number">0</span> &amp;&amp; fy &lt; m &amp;&amp; !vis1[fx][fy] &amp;&amp; s[fx][fy] != <span class="string">'#'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                vis1[fx][fy] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum1[fx][fy] = temp.num + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                q.push(node(fx,fy,temp.num+<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//找到M到KFC的最短时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vis2[x][y] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">queue</span>&lt;node&gt;q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q.push(node(x,y,<span class="number">0</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        node temp = q.front();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        q.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(s[temp.x][temp.y] == <span class="string">'@'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sum++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(sum == suma) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> fx = temp.x + dir[i][<span class="number">0</span>], fy = temp.y + dir[i][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(fx &gt;=<span class="number">0</span> &amp;&amp; fx &lt; n &amp;&amp; fy &gt;= <span class="number">0</span> &amp;&amp; fy &lt; m &amp;&amp; !vis2[fx][fy] &amp;&amp; s[fx][fy] != <span class="string">'#'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                vis2[fx][fy] = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sum2[fx][fy] = temp.num + <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                q.push(node(fx,fy,temp.num+<span class="number">1</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mem(vis1,<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mem(vis2,<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mem(sum1,INF);<span class="comment">//最短时间赋为无穷大</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        mem(sum2,INF);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">cin</span> &gt;&gt; s[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'@'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    suma++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'Y'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    BFS1(i,j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'M'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    BFS2(i,j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> ans = INF;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(s[i][j] == <span class="string">'@'</span>) &#123;<span class="comment">//遍历每个KFC</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ans = min(ans,sum1[i][j] + sum2[i][j]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans*<span class="number">11</span> &lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></code></pre><p>从这个代码中学到的东西：<font face="楷体"><font color="blue"></font></font></p>
<ol>
<li>string s,其实应该开成char s，前者占的内存是后者的四倍。</li>
<li>vis数组只用0，1区分。</li>
<li>再开一个sum[x][y]数组记录某人到达x，y的步数。当时我想的是vis开个三维的行不行，应该是可以的，不过这两种写法都挺占内存的。</li>
<li>状态的表示，本例中使用了struct，并且写了构造函数，方便了bfs中while之前的压入操作，不用再声明一个临时的结构体了。</li>
<li>bfs中while内部的写法。先声明一个临时的node，围绕这个node进行操作。</li>
<li>一开始难住我的是bfs的终止条件和两次bfs后怎么遍历步数<br>上边的代码时先数出了kfc的数量，bfs时每人每遍历到一个kfc就++，当时确实没想到。</li>
<li>ans=INF<br>ans = min(ans,sum1[i][j] + sum2[i][j]);实现了求解步数，挺不错的。ans使用INF先初始化，再取最小值。题目保证了一定有解。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>kuangbin专题一简单搜索(12)</title>
    <url>/2020/03/25/kuangbin%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2(12)/</url>
    <content><![CDATA[<center>
<font face="微软雅黑" color="littblue">hdu1241 Oil Deposits(dfs求解连通块-模板题目)

<p><a href="https://vjudge.net/problem/HDU-1241" target="_blank" rel="noopener">https://vjudge.net/problem/HDU-1241</a></p></font></center><p></p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;//本质是求解连通块的数量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> map1[<span class="number">100</span>][<span class="number">100</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[<span class="number">100</span>][<span class="number">100</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> d[<span class="number">8</span>][<span class="number">2</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;<span class="comment">//vis[i]=j</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x,y;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//函数接口:反应的是一个状态</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map1[x][y]=<span class="string">'#'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> dx=x+d[i][<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">int</span> dy=y+d[i][<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(dx&gt;=<span class="number">0</span>&amp;&amp;dy&gt;=<span class="number">0</span>&amp;&amp;dx&lt;n&amp;&amp;dy&lt;m&amp;&amp;map1[dx][dy]==<span class="string">'@'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dfs(dx,dy);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&amp;&amp;n!=<span class="number">0</span>&amp;&amp;m!=<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">memset</span>(map1,<span class="number">0</span>,<span class="keyword">sizeof</span>(map1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">cin</span>&gt;&gt;map1[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map1[i][j]==<span class="string">'@'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#123;dfs(i,j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ans++;<span class="comment">//dfs调用的次数就是连通块的总个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">cout</span>&lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></code></pre>]]></content>
  </entry>
  <entry>
    <title>kuangbin专题一简单搜索(1)</title>
    <url>/2020/03/24/kuangbin%E4%B8%93%E9%A2%98%E4%B8%80%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2(1)/</url>
    <content><![CDATA[<center>
<font face="微软雅黑" color="littblue">poj1321棋盘问题(N皇后简单版)

<p><a href="https://vjudge.net/problem/POJ-1321" target="_blank" rel="noopener">https://vjudge.net/problem/POJ-1321</a></p></font></center><p></p>
<pre><code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;//棋盘问题的dfs就在于，用dfs替代了多重循环</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;//递归完全可以替代循环</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;<span class="comment">//小心爆栈</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n,k;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> map1[<span class="number">10</span>][<span class="number">10</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> vis[<span class="number">100</span>];<span class="comment">//表示第i行的第j列摆放棋子了没</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ans;<span class="comment">//vis[i]=j</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> r)</span><span class="comment">//函数接口:反应的是一个状态</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(r==k)<span class="comment">//放好所有的棋子，返回</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="comment">//怎么放，一行一行</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;n;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)<span class="comment">//从第一列开始看</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map1[i][j]==<span class="string">'1'</span>&amp;&amp;!vis[j])<span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                vis[j]=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dfs(i+<span class="number">1</span>,j,r+<span class="number">1</span>);<span class="comment">//i+1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                vis[j]=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&amp;&amp;n!=<span class="number">-1</span>&amp;&amp;k!=<span class="number">-1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ans=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">memset</span>(map1,<span class="number">0</span>,<span class="keyword">sizeof</span>(map1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">cin</span>&gt;&gt;map1[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(map1[i][j]==<span class="string">'#'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                map1[i][j]=<span class="string">'1'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dfs(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">cout</span>&lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></code></pre>]]></content>
  </entry>
  <entry>
    <title>为何使用补码</title>
    <url>/2020/03/07/%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8%E8%A1%A5%E7%A0%81/</url>
    <content><![CDATA[<h1 id="我们为什么要用补码"><a href="#我们为什么要用补码" class="headerlink" title="我们为什么要用补码?"></a><center><font color="red">我们为什么要用补码?</font></center></h1><p>&emsp;&#8195;我们主要要解决的问题就是负数的表示，而众所周知，绝对值相等的两个正负数之和为0。</p>
<p>&emsp;&#8195;假设我们有正数 0000 0000 0000 1111，我们如何表示其相反数呢？一般我们的思路是，找一个数，跟它相加的结果等于0，但是我们发现，要找出一个与它相加后结果等于0的数还是要略加思考一下的（因为要计算进位），所以，为何不找出一个与它相加后结果是1111 1111 1111 1111的数，然后该数+1即是我们所要的答案啦。</p>
<p>&emsp;&#8195;于是，很容易的<br>    0000 0000 0000 1111 + 1111 1111 1111 0000 + 1 = 1111 1111 1111 1111 + 1 = （1）0000 0000 0000 0000<br>    一目了然，1111 1111 1111 0001 就是我们想要的答案了，那么我们是怎么得到这个相反数的呢？</p>
<p>&emsp;&#8195;首先，找出一个数与它加起来结果是全1的，这个数便是它的反码，然后这个数再加1，这便是它的相反数了，也是我们说的补码。</p>
<p>&emsp;&#8195;我们检验一下0的情况，0000 + 1111 + 1 =（1）0000，其中1111 + 1 = （1）0000 = 0000，即+0和-0的二进制表示均为0000。   </p>
]]></content>
  </entry>
  <entry>
    <title>加油！</title>
    <url>/2020/03/05/%E5%8A%A0%E6%B2%B9%EF%BC%81/</url>
    <content><![CDATA[<p>#<center>督促自己更新博客</center><br>自从搭建博客之后好久不更新了，博客并没有搭建在别的服务器上，这个问题要尽快解决。最近自己在刷搜索类的题目。应该好好整理整理自己的博客。把题解，还有最近学到的知识归档，方便以后查找复习。加油！</p>
]]></content>
  </entry>
  <entry>
    <title>第四篇博客markdown简要介绍</title>
    <url>/2019/12/23/%E7%AC%AC%E5%9B%9B%E7%AF%87%E5%8D%9A%E5%AE%A2markdown%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<center>本篇博客主要介绍markdown的语法</center>


<p>1.标题<br>使用“#”，一个“#”对应一个一级标题。</p>
<p>例如：</p>
<p>#这是一级标题<br>##这是二级标题<br>###这是三级标题<br>####这是四级标题<br>#####这是五级标题</p>
<hr>
<p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><strong><em>斜体加粗</em></strong></p>
<p><del>这是加删除线的文字</del>(这个有问题，不清楚解决方法)</p>
<p>3.引用</p>
<blockquote>
<p>一个大括号表示引用</p>
<blockquote>
<p>两个大括号是引用的嵌套表示</p>
<blockquote>
<p>三级引用嵌套</p>
<blockquote>
<p>四级引用嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>4.分割线</p>
<hr>
<p>三个或以上“-”或“*”</p>
<hr>
<p>5.图片</p>
<p>！[图片的介绍显示在图片的下边]（&lt;图片的url地址&gt;）<br>（其中url地址后可以加上’’图片的title’’，title是当鼠标的光标移动到图片上时，图片会显示出来的提示性文字，可有可无）</p>
<p>关于查看图片的url（右键图片-审查元素-复制url地址）</p>
<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1577084559917&amp;di=c4a2ef6007ed74be0835cc8dd85a69a0&amp;imgtype=0&amp;src=http%3A%2F%2Fpkunews.pku.edu.cn%2Fxwzh%2Fattachement%2Fjpg%2Fsite2%2F20180319%2F2c4138b2cf3f1c19c1f00d.jpg" alt></p>
<p>url获取方法：</p>
<p>利用谷歌点击图片检查，copy-linkaddress，或者直接找source，从http到以.jpg结尾全部复制粘贴</p>
<p>6.超链接</p>
<p>title可有可无</p>
<p>&lt; a href=”超链接地址” title=”超链接title”&gt;超链接显示名</p>
<p>示例：</p>
<p><a href="https://forward-985.github.io" target="_blank" rel="noopener">我的博客</a></p>
<p>7.无序列表</p>
<p>语法+，-，*中的任意一种</p>
<p>（每种符号后边都要跟空格的）</p>
<ul>
<li></li>
<li></li>
<li></li>
<li></li>
</ul>
<p>有序列表：数字加点</p>
<ol>
<li>序号和内容之间要有空格</li>
<li>自动加级</li>
</ol>
<p>列表的嵌套</p>
<p>上一级和下一级之间敲三个空格</p>
<ul>
<li>一级无序列表</li>
</ul>
<ul>
<li>二级无序列表</li>
<li>三级无序列表（只有二级的）</li>
</ul>
<p>8.表格</p>
<p>搞不懂为什么不起作用啊</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<p>9.代码</p>
<p>单行代码： 代码两端分别用一个反引号包起来</p>
<p><code>这是单行的代码哦</code></p>
<p>代码块：   代码之间分别用三个反引号包起来，</p>
<p>(<code>)
 function fun(){
         echo &quot;这是一句非常牛逼的代码&quot;;
    }
    fun();
(</code>)</p>
<p>10.字体</p>
<p>格式：<font face="这是什么字体">输入内容</font><br>(删掉空格)<br><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="red">我是红色</font><br><font color="#008000">我是绿色</font><br><font color="Blue">我是蓝色</font><br><font size="5">我是尺寸</font><br><font face="黑体" color="green" size="5">我是黑体，绿色，尺寸为5</font></p>
<p>2019/12/23 13:15:19 2019/12/23 13:15:28 2019/12/23 13:15:28 </p>
<p>添加一项内容</p>
<p>在hexo g（生成静态网页–自认为这是静态网页）<br>当然也可以是hexo d部署到外部去遇到的问题</p>
<p>markdown有格式要求</p>
<p>上述错误是由于博文的yaml头部格式不正确导致的，正确的头部格式如下：<br>title: yourtitle<br>description: your description<br>tags: </p>
<ul>
<li>tag1</li>
<li>tag2<br>categories: categorie1</li>
</ul>
<hr>
<p>以下为正文<br>头部和正文之间要使用3个“-”进行分割，3个“-”与头部之间要有一个空行<br>注意冒号后边要有空格，“-”符号前后都要有空格！<br>title的内容中间不能有空格！</p>
<center><font color="red" size="5">以后我会完善排版的（给个赞吧(●'◡'●)）</font></center>
]]></content>
  </entry>
</search>
